#!/bin/bash
#
# Created by Perry Driscoll 31/1/2022 - https://github.com/PezzaD84
# Last Update 16/2/2023
#
# LAPS FOR JAMF V2.2.1
#
# Script to Encrypt LAPS password and create local admin
#
# JAMF Script Variables
# $4: Local Admin Username
# $5: Encrypted API Credentials
# $6: JSS URL 
# $7: Password Length
# $8: Special Character (true or false)
# $9: Slack WebHook URL
#
#############################################################

# Variables

LAPSLOG="/Library/.LAPS/Logs/LAPS.log"
DEVICE=`hostname`
serial=$(system_profiler SPHardwareDataType | awk '/Serial Number/{print $4}')

# Initial Setup

if [ -f "$LAPSLOG" ]; then
	echo "Log already exists. Continuing setup....."
    echo "***** LAPS Account cycled `date '+%d/%m/%Y %T'`"
	echo "***** LAPS Account cycled `date '+%d/%m/%Y %T'`" >> "$LAPSLOG"
else
	# Check for existing duplicate admin accounts
	LAPSaccount="$4"

	if dscl . -list /Users | grep -x -i "$LAPSaccount"; then
		echo "Local admin account already exists with the same name. Please rename your LAPSaccount or delete the local admin account before configuring LAPS."
		osascript -e 'Display dialog "An account with the same name pre-exists on this device.\n\nPlease remove the existing local account or rename the LAPS account.\n\nExisting Account: '$LAPSaccount'" buttons {"Quit"} default button 1 with title "LAPS Setup failure" with icon alias "System:Library:CoreServices:CoreTypes.bundle:Contents:Resources:AlertStopIcon.icns"'
		exit 1
	fi
	
	echo "Log does not exist. Creating Log now....."
	mkdir -p /Library/.LAPS/Logs/
	touch "$LAPSLOG"
    echo "LAPS Log created. Continuing setup....."
	echo "***** LAPS Account creation `date '+%d/%m/%Y %T'`"
	echo "***** LAPS Account creation `date '+%d/%m/%Y %T'`" >> "$LAPSLOG"
fi

# API Credentials

encryptedcreds="$5"

token=$(curl -s -H "Content-Type: application/json" -H "Authorization: Basic ${encryptedcreds}" -X POST "$6/api/v1/auth/token" | grep 'token' | tr -d '"',',' | sed -e 's#token :##' | xargs)

# Random password to be used

length=$7

echo "Password length has been set to $length characters"
echo "Password length has been set to $length characters" >> "$LAPSLOG"

chars='@#$%&_+=!?'

spchar=${chars:$((RANDOM % ${#chars})):1}

specialchar=$8

if $specialchar == true ; then
	password=$(openssl rand -base64 32 | tr -d '/' | tr -d '\' | tr -d ' ' | cut -c -$length | cut -c 2-)
	finalpass=$password$spchar
    echo "A Special character has been set in the password"
	echo "A Special character has been set in the password" >> "$LAPSLOG"
else
	password=$(openssl rand -base64 32 | tr -d '/' | tr -d '\' | tr -d ' ' | cut -c -$length )
	finalpass=$password
fi

# Random Secret used to Encrypt and Decrypt password
secret=$(openssl rand -base64 32 | cut -c -14 | tr -d \/ | tr -d //)

# Encrypt Random password and save to file
cryptkey=$(echo "$finalpass" | openssl enc -aes-256-cbc -md sha512 -a -salt -pass pass:$secret)

# Create local admin

if dscl . read /Groups/admin | grep $4; then
	echo "$4 has already been created and is a local admin. Resetting local admin password...."
	echo "$4 has already been created and is a local admin. Resetting local admin password...." >> "$LAPSLOG"
	
	TITLE="LAPS Password Reset"
	
	# Reset local admin password
	
    token=$(curl -s -H "Content-Type: application/json" -H "Authorization: Basic ${encryptedcreds}" -X POST "$6/api/v1/auth/token" | grep 'token' | tr -d '"',',' | sed -e 's#token :##' | xargs)
	serial=$(system_profiler SPHardwareDataType | awk '/Serial Number/{print $4}')
	OLDkey=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" -H 'Accept: application/json' -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep CryptKey | tr '"' ' ' | awk '{print $16}')
	OLDsecret=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i SECRET | tr '"' ' ' | awk '{print $16}')
	OLDpasswd=$(echo $OLDkey | openssl enc -aes-256-cbc -md sha512 -a -d -salt -pass pass:$OLDsecret)
		
		sysadminctl -adminUser $4 -adminPassword $OLDpasswd -resetPasswordFor $4 -newPassword $finalpass

		pswdCheck=$(dscl /Local/Default -authonly $4 $finalpass)
		if echo $pswdCheck | grep eDSAuthFailed; then
		echo "Password validation failed."
		echo "Password validation failed." >> "$LAPSLOG"
		exit 1
		fi
		echo "Password validated"
		echo "Password validated" >> "$LAPSLOG"
		
		rm -rf /Users/$4/Library/Keychains/*
		
	# Check Password reset Extension attribute
	
		resetStatus=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/ExtensionAttributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i Reset | tr '"' ' ' | awk '{print $17}')	
			
			if [[ $resetStatus == "Yes" ]]; then
				echo "LAPS Password has been reset. Resetting EA to default value"
				echo "LAPS Password has been reset. Resetting EA to default value" >> "$LAPSLOG"
				
				resetID=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/ExtensionAttributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i Reset | tr ':' ' ' | tr ',' ' ' | awk '{print $2}')
					
					curl -s -X "PUT" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" \
					-H "Content-Type: application/xml" \
					-H "Accept: application/xml" \
					-H "Authorization:Bearer ${token}" \
					-d "<computer><extension_attributes><extension_attribute><id>$resetID</id><name>LAPS Reset Password</name><type>String</type><value>No</value></extension_attribute></extension_attributes></computer>"
					else
					echo "EA to cycle LAPS password has not been specified"
					echo "EA to cycle LAPS password has not been specified" >> "$LAPSLOG"
			fi
	
else

	echo "$4 does not exist. Creating local admin now"
	echo "$4 does not exist. Creating local admin now" >> "$LAPSLOG"
	
	TITLE="LAPS Account Created"
	
# Create LAPS Account

sudo sysadminctl \
-addUser $4 \
-fullName $4 \
-shell /bin/zsh \
-password $finalpass \
-admin

sleep 5

if dscl . read /Groups/admin | grep $4; then
	echo "LAPS Account created Successfully"
	echo "LAPS Account created Successfully" >> "$LAPSLOG"
fi

# Create Setup Assistant suppress plist

echo "<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>DidSeeAvatarSetup</key>
	<integer>1</integer>
	<key>DidSeeCloudSetup</key>
	<true/>
	<key>DidSeeSiriSetup</key>
	<integer>1</integer>
	<key>DidSeeSyncSetup</key>
	<integer>1</integer>
	<key>DidSeeSyncSetup2</key>
	<integer>1</integer>
	<key>DidSeeiCloudLoginForStorageServices</key>
	<integer>1</integer>
	<key>DidSeeiCloudSecuritySetup</key>
	<integer>1</integer>
	<key>GestureMovieSeen</key>
	<integer>1</integer>
	<key>LastSeenBuddyBuildVersion</key>
	<string>21D62</string>
	<key>LastSeenCloudProductVersion</key>
	<string>12.2.1</string>
</dict>
</plist>" > /Users/$4/Library/Preferences/com.apple.SetupAssistant.plist

# Set pemissions on setup assistant plist
chown $4: /Users/$4/Library/Preferences/com.apple.SetupAssistant.plist 
chmod 644 /Users/$4/Library/Preferences/com.apple.SetupAssistant.plist

fi

# Upload cryptkey to device inventory

cryptID=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/ExtensionAttributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i CryptKey | tr ':' ' ' | tr ',' ' ' | awk '{print $2}')
	
	curl -s -X "PUT" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" \
	-H "Content-Type: application/xml" \
	-H "Accept: application/xml" \
	-H "Authorization:Bearer ${token}" \
	-d "<computer><extension_attributes><extension_attribute><id>$cryptID</id><name>LAPS CryptKey</name><type>String</type><value>$cryptkey</value></extension_attribute></extension_attributes></computer>"

# Upload secret to device inventory

secretID=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/ExtensionAttributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i secret | tr ':' ' ' | tr ',' ' ' | awk '{print $2}')
	
	curl -s -X "PUT" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" \
	-H "Content-Type: application/xml" \
	-H "Accept: application/xml" \
	-H "Authorization:Bearer ${token}" \
	-d "<computer><extension_attributes><extension_attribute><id>$secretID</id><name>LAPS Secret</name><type>String</type><value>$secret</value></extension_attribute></extension_attributes></computer>"
	
# Check LAPS details have been escrowed to Jamf
		
# Grab decryption key for password
	cryptkey=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i CryptKey | awk -F '"value":"' '{print $2}' | awk -F '"' '{print $1}')

# Grab secret for decryption
	secretkey=$(curl -s -X "GET" "$6/JSSResource/computers/serialnumber/$serial/subset/extension_attributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i Secret | awk -F '"value":"' '{print $2}' | awk -F '"' '{print $1}')
	
	ID=$(curl -s -X GET "$6/JSSResource/computers/serialnumber/$serial" -H 'Accept: application/xml' -H "Authorization:Bearer ${token}" | tr '<' '\n' | grep -m 1 id | tr -d 'id>')	

	if [[ $cryptkey == "" ]] || [[ $secretkey == "" ]]; then
		
		echo "Device serial is $serial"
		echo "JAMF ID is $ID"
		echo "LAPS Configuration has failed"
		echo "Device serial is $serial" >> "$LAPSLOG"
		echo "JAMF ID is $ID" >> "$LAPSLOG"
		echo "LAPS Configuration has failed" >> "$LAPSLOG"
		RESULT="There was an error. Please check LAPS log for more info."
		if [[ $cryptkey == "" ]]; then
			echo "Cryptkey has not been successfully configured"
			echo "Cryptkey has not been successfully configured" >> "$LAPSLOG"
		fi
		if [[ $secretkey == "" ]]; then
			echo "SecretKey has not been successfully configured"
			echo "SecretKey has not been successfully configured" >> "$LAPSLOG"
		fi
	else
		echo "CryptKey and SecretKey Escrowed to Jamf successfully"
		echo "Device serial is $serial"
		echo "JAMF ID is $ID"
		echo "LAPS Configuration was successful"
		echo "CryptKey and SecretKey Escrowed to Jamf successfully" >> "$LAPSLOG"
		echo "Device serial is $serial" >> "$LAPSLOG"
		echo "JAMF ID is $ID" >> "$LAPSLOG"
		echo "LAPS Configuration was successful" >> "$LAPSLOG"
		RESULT="LAPS Configuration was successful"
	fi

# Slack Notification

if [[ $9 == "" ]]; then
	echo "No slack URL configured"
else
	curl -X POST -H 'Content-type: application/json' \
	-d \
	'{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "'"$TITLE"':closed_lock_with_key:",
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"fields": [
				{
					"type": "mrkdwn",
					"text": ">*Device Name:*\n>'"$DEVICE"'"
				},
				{
					"type": "mrkdwn",
					"text": ">*LAPS Account name:*\n>'"$4"'"
				},
				{
					"type": "mrkdwn",
					"text": ">*LAPS Confirmation:*\n>'"$RESULT"'"
				},
			]
		},
	]
}' \
$9
fi
