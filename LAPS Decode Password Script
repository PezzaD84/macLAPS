#!/bin/bash
#
# Author  : Perry Driscoll - https://github.com/PezzaD84
# Created : 31/1/2022
# Updated : 24/1/2023
# Version : v2.2
#
############################################################################
# Description:
#	This script is to decode the encoded LAPS password and display this
#	to the end user/support engineer.
#
############################################################################
# Copyright Â© 2023 Perry Driscoll <https://github.com/PezzaD84>
#
# This file is free software and is shared "as is" without any warranty of 
# any kind. The author gives unlimited permission to copy and/or distribute 
# it, with or without modifications, as long as this notice is preserved. 
# All usage is at your own risk and in no event shall the authors or 
# copyright holders be liable for any claim, damages or other liability.
############################################################################
#
# JAMF Script Variables
# $4: JSS URL
# $5: Encoded API Credentials
# $6: Switch for password rotation (true or false)
# $7: Slack WebHook URL
# $8: Service desk URL
#
############################################################################

# Variables

CURRENT_USER=$(ls -l /dev/console | awk '{ print $3 }')
DEVICE=`hostname`
LAPSLOG="/Library/.LAPS/Logs/LAPS.log"
SERVICEDESK="$8"

# Create Log

if [ -f "$LAPSLOG" ]; then
	echo "Log already exists. Continuing setup....."
else
	echo "Log does not exist. Creating Log now....."
	mkdir -p /Library/.LAPS/Logs/
	touch "$LAPSLOG" 
fi

echo "***** LAPS Decoded `date '+%d/%m/%Y %T'`"
echo "***** LAPS Decoded `date '+%d/%m/%Y %T'`" >> "$LAPSLOG"

# API Credentials

encryptedcreds="$5"
	
token=$(curl -s -H "Content-Type: application/json" -H "Authorization: Basic ${encryptedcreds}" -X POST "$4/api/v1/auth/token" | plutil -extract token raw -)

# Pop up for Device name
	
message=$(dialog \
--bannerimage "/Library/.LAPS/Branding/Wallpapers/GenericLapsBanner.png" \
--title "none" \
--icon "/Library/.LAPS/Branding/Icons/lock icon.png" --iconsize 100 \
--message "Please enter the name of the device you wish to see the LAPS password for. \n\n You must also provide a reason for viewing the LAPS Password for auditing." \
--messagefont "name=Arial,size=17" \
--button1text "Continue" \
--button2text "Quit" \
--textfield "Device name,required" \
--textfield "Reason,required" \
--ontop \
--regular \
--json \
--moveable
)
			
name=$(echo $message | awk -F '"Device name" : "' '{print$2}' | awk -F '"' '{print$1}')
reason=$(echo $message | awk -F '"Reason" : "' '{print$2}' | awk -F '"' '{print$1}') # Thanks to ons-mart https://github.com/ons-mart
			
if [[ $name == "" ]] || [[ $reason == "" ]]; then
	echo "Aborting"
	exit 1
fi			
		
# Grab decoder key for password
cryptkey=$(curl -s -X "GET" "$4/JSSResource/computers/name/$name/subset/extension_attributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i CryptKey | tr '"' ' ' | awk '{print $16}')
			
# Grab secret for decoder
secretkey=$(curl -s -X "GET" "$4/JSSResource/computers/name/$name/subset/extension_attributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i Secret | tr '"' ' ' | awk '{print $16}')
				
# Decode password and display
				
passwd=$(echo $cryptkey | openssl enc -aes-256-cbc -md sha512 -a -d -salt -pass pass:$secretkey)
				
dialog \
--bannerimage "/Library/.LAPS/Branding/Wallpapers/GenericLapsBanner.png" \
--title "none" \
--icon "/Library/.LAPS/Branding/Icons/Open Lock Icon.png" --iconsize 100 \
--message "The LAPS Password for $name is: $passwd \n\n This message will close after 10seconds." \
--messagefont "name=Arial,size=17" \
--timer \
--ontop \
--moveable \
--small &

echo "The LAPS Password for $name was viewed by $CURRENT_USER on $DEVICE"
echo "The LAPS Password for $name was viewed by $CURRENT_USER on $DEVICE" >> "$LAPSLOG"
echo "Reason for viewing password: $reason"
echo "Reason for viewing password: $reason" >> "$LAPSLOG"

# Slack notification

if [[ $7 == "" ]]; then
	echo "No slack URL configured"
else
	if [[ $SERVICEDESK == "" ]]; then
		SERVICEDESK="https://www.slack.com"
	fi
curl -X POST -H 'Content-type: application/json' \
	-d \
	'{
	"blocks": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "LAPS Password Requested:closed_lock_with_key:",
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"fields": [
				{
					"type": "mrkdwn",
					"text": ">*Device Name:*\n>'"$name"'"
				},
				{
					"type": "mrkdwn",
					"text": ">*Requested by:*\n>'"$CURRENT_USER"'"
				},
				{
					"type": "mrkdwn",
					"text": ">*Reason for Request:*\n>'"$reason"'"
				},
			]
		},
		{
		"type": "actions",
			"elements": [
				{
					"type": "button",
					"text": {
						"type": "plain_text",
						"text": "Challenge Request",
						"emoji": true
					},
					"style": "danger",
					"action_id": "actionId-0",
					"url": "'"$SERVICEDESK"'"
				}
			]
		}
	]
}' \
$7
fi

# Final Decoder checks for password rotation
		
if [[ $6 == "True" ]] || [[ $6 == "true" ]]; then
	echo "Password rotation has been set to True. Password for $name will be reset at next login"
	echo "Password rotation has been set to True. Password for $name will be reset at next login." >> "$LAPSLOG"
		
# Reset local admin password
	
	resetID=$(curl -s -X "GET" "$4/JSSResource/computers/name/$name/subset/ExtensionAttributes" -H "Accept: application/json" -H "Authorization:Bearer ${token}" | tr '{' '\n' | grep -i Reset | tr ':' ' ' | tr ',' ' ' | awk '{print $2}')
		
	curl -s -X "PUT" "$4/JSSResource/computers/name/$name/subset/extension_attributes" \
	-H "Content-Type: application/xml" \
	-H "Accept: application/xml" \
	-H "Authorization:Bearer ${token}" \
	-d "<computer><extension_attributes><extension_attribute><id>$resetID</id><name>LAPS Reset Password</name><type>String</type><value>Yes</value></extension_attribute></extension_attributes></computer>"

else
	echo "Password rotation has not been specified."
	echo "Password rotation has not been specified." >> "$LAPSLOG"

fi

exit 0
